#!/usr/bin/env python3
"""
ุจูุช ุฎุฏูุฉ ุงูุนููุงุก ุนูู ุชูุฌุฑุงู
Customer Service Bot for Telegram
"""

import logging
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatAction
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

# ุฅุนุฏุงุฏ ูุธุงู ุงูุณุฌูุงุช
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Token ุงูุจูุช
BOT_TOKEN = "7968719347:AAEUloIBy_gvD2cmE9vrdiHcZwClldYZ-Xk"

# ูุนุฑู ุงููุณุคูู (ูููู ุชุบููุฑู ูุงุญูุงู)
ADMIN_ID = None  # ุณูุชู ุชุนูููู ูู ุฃูู ูุณุชุฎุฏู

# ุญุงูุงุช ุงููุญุงุฏุซุฉ
CHOOSING, TYPING_REPLY, WAITING_FOR_MESSAGE = range(3)

# ูุงููุณ ูุชุฎุฒูู ุจูุงูุงุช ุงููุณุชุฎุฏููู
user_data = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ุจุฏุก ุงููุญุงุฏุซุฉ ูุน ุงูุจูุช"""
    user = update.effective_user
    user_id = user.id
    
    # ุชุณุฌูู ุจูุงูุงุช ุงููุณุชุฎุฏู
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'username': user.username,
            'start_time': datetime.now(),
            'messages': []
        }
    
    # ุฑุณุงูุฉ ุงูุชุฑุญูุจ
    welcome_text = f"""
๐ ุฃููุงู ูุณููุงู {user.first_name}!

ูุฑุญุจุงู ุจู ูู ุจูุช ุฎุฏูุฉ ุงูุนููุงุก. ูุญู ููุง ููุณุงุนุฏุชู!

ุงุฎุชุฑ ุฃุญุฏ ุงูุฎูุงุฑุงุช ุงูุชุงููุฉ:
"""
    
    # ุฅูุดุงุก ููุญุฉ ุงูููุงุชูุญ
    keyboard = [
        [InlineKeyboardButton("โ ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ", callback_data='faq')],
        [InlineKeyboardButton("๐ ุงูุชูุงุตู ูุน ุงูุฏุนู", callback_data='support')],
        [InlineKeyboardButton("โน๏ธ ูุนูููุงุช ุนูุง", callback_data='about')],
        [InlineKeyboardButton("๐ฌ ุดููู ุฃู ุงูุชุฑุงุญ", callback_data='complaint')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return CHOOSING


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ูุนุงูุฌุฉ ููุฑุงุช ุงูุฃุฒุฑุงุฑ"""
    query = update.callback_query
    await query.answer()
    
    choice = query.data
    user_id = query.from_user.id
    
    if choice == 'faq':
        await handle_faq(query)
    elif choice == 'support':
        await handle_support(query, context)
    elif choice == 'about':
        await handle_about(query)
    elif choice == 'complaint':
        await handle_complaint(query, context)
    elif choice == 'back_to_menu':
        await back_to_menu(query)
    
    return CHOOSING


async def handle_faq(query) -> None:
    """ุงูุชุนุงูู ูุน ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ"""
    faq_text = """
โ **ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ**

**ุณ: ููู ูููููู ุงูุงุชุตุงู ุจูุฑูู ุงูุฏุนูุ**
ุฌ: ููููู ุงุฎุชูุงุฑ "ุงูุชูุงุตู ูุน ุงูุฏุนู" ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ.

**ุณ: ูุง ูู ุณุงุนุงุช ุงูุนููุ**
ุฌ: ูุญู ูุชุงุญูู ูู ุงูุณุงุนุฉ 9 ุตุจุงุญุงู ุฅูู 6 ูุณุงุกูุ ูู ุงูุฃุญุฏ ุฅูู ุงูุฎููุณ.

**ุณ: ูู ุงูููุช ุงููุงุฒู ููุฑุฏ ุนูู ุงุณุชูุณุงุฑุงุชูุ**
ุฌ: ุนุงุฏุฉู ูุฑุฏ ุฎูุงู 24 ุณุงุนุฉ.

**ุณ: ูู ูููููู ุชุชุจุน ุญุงูุฉ ุทูุจูุ**
ุฌ: ูุนูุ ุณูุฑุณู ูู ุฑูู ุชุชุจุน ุนูุฏ ุงุณุชูุจุงู ุทูุจู.

**ุณ: ูู ููุงู ุฑุณูู ุฅุถุงููุฉุ**
ุฌ: ูุงุ ุฌููุน ุฎุฏูุงุชูุง ุงูุฃุณุงุณูุฉ ูุฌุงููุฉ.

---
"""
    
    keyboard = [
        [InlineKeyboardButton("โฌ๏ธ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=faq_text, reply_markup=reply_markup, parse_mode='Markdown')


async def handle_support(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุงูุชุนุงูู ูุน ุทูุจ ุงูุชูุงุตู ูุน ุงูุฏุนู"""
    support_text = """
๐ **ุงูุชูุงุตู ูุน ูุฑูู ุงูุฏุนู**

ูุฑุฌู ุงุฎุชูุงุฑ ููุน ุงููุดููุฉ:
"""
    
    keyboard = [
        [InlineKeyboardButton("๐ง ูุดููุฉ ุชูููุฉ", callback_data='tech_issue')],
        [InlineKeyboardButton("๐ณ ูุดููุฉ ูู ุงูุฏูุน", callback_data='payment_issue')],
        [InlineKeyboardButton("๐ฆ ูุดููุฉ ูู ุงูุทูุจ", callback_data='order_issue')],
        [InlineKeyboardButton("โ ุงุณุชูุณุงุฑ ุนุงู", callback_data='general_inquiry')],
        [InlineKeyboardButton("โฌ๏ธ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=support_text, reply_markup=reply_markup, parse_mode='Markdown')


async def handle_about(query) -> None:
    """ุงูุชุนุงูู ูุน ุทูุจ ูุนูููุงุช ุนูุง"""
    about_text = """
โน๏ธ **ูุนูููุงุช ุนูุง**

๐ข **ุงุณู ุงูุดุฑูุฉ:** ุดุฑูุฉ ุงูุฎุฏูุงุช ุงูููุชุงุฒุฉ

๐ **ุงููููุน:** ุงูุฑูุงุถุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ

๐ง **ุงูุจุฑูุฏ ุงูุฅููุชุฑููู:** support@company.com

๐ฑ **ุงููุงุชู:** +966 11 1234567

๐ **ุงููููุน ุงูุฅููุชุฑููู:** www.company.com

โฐ **ุณุงุนุงุช ุงูุนูู:** 
- ุงูุฃุญุฏ - ุงูุฎููุณ: 9 ุตุจุงุญุงู - 6 ูุณุงุกู
- ุงูุฌูุนุฉ ูุงูุณุจุช: ูุบูู

---
"""
    
    keyboard = [
        [InlineKeyboardButton("โฌ๏ธ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=about_text, reply_markup=reply_markup, parse_mode='Markdown')


async def handle_complaint(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุงูุชุนุงูู ูุน ุงูุดูุงูู ูุงูุงูุชุฑุงุญุงุช"""
    complaint_text = """
๐ฌ **ุดููู ุฃู ุงูุชุฑุงุญ**

ุดูุฑุงู ูุงูุชูุงูู! ูุฑุฌู ูุชุงุจุฉ ุดููุงู ุฃู ุงูุชุฑุงุญู ูู ุงูุฑุณุงูุฉ ุงูุชุงููุฉ.

ุณูุชู ุฅุฑุณุงู ุฑุณุงูุชู ูุจุงุดุฑุฉ ุฅูู ูุฑูู ุงูุฏุนู.
"""
    
    keyboard = [
        [InlineKeyboardButton("โ๏ธ ุงูุชุจ ุฑุณุงูุชู", callback_data='write_message')],
        [InlineKeyboardButton("โฌ๏ธ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data='back_to_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=complaint_text, reply_markup=reply_markup, parse_mode='Markdown')


async def back_to_menu(query) -> int:
    """ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"""
    welcome_text = """
๐ ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ

ุงุฎุชุฑ ุฃุญุฏ ุงูุฎูุงุฑุงุช ุงูุชุงููุฉ:
"""
    
    keyboard = [
        [InlineKeyboardButton("โ ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ", callback_data='faq')],
        [InlineKeyboardButton("๐ ุงูุชูุงุตู ูุน ุงูุฏุนู", callback_data='support')],
        [InlineKeyboardButton("โน๏ธ ูุนูููุงุช ุนูุง", callback_data='about')],
        [InlineKeyboardButton("๐ฌ ุดููู ุฃู ุงูุชุฑุงุญ", callback_data='complaint')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=welcome_text, reply_markup=reply_markup)
    return CHOOSING


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌุฉ ุงูุฑุณุงุฆู ุงููุตูุฉ"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # ุชุณุฌูู ุงูุฑุณุงูุฉ
    if user_id in user_data:
        user_data[user_id]['messages'].append({
            'text': message_text,
            'timestamp': datetime.now()
        })
    
    # ุฑุณุงูุฉ ุชุฃููุฏ
    confirmation_text = """
โ **ุชู ุงุณุชูุจุงู ุฑุณุงูุชู**

ุดูุฑุงู ุนูู ุชูุงุตูู ูุนูุง! ุณูุชู ุงูุฑุฏ ุนููู ูู ุฃูุฑุจ ููุช ูููู.

ุฑูู ุชุชุจุน ุทูุจู: `#{}` 

ูุฑุฌู ุงูุงุญุชูุงุธ ุจุฑูู ุงูุชุชุจุน ูุฐุง ูููุชุงุจุนุฉ.
""".format(user_id)
    
    await update.message.reply_text(confirmation_text, parse_mode='Markdown')
    
    # ุฅุฑุณุงู ุฅุดุนุงุฑ ูููุณุคูู (ุฅุฐุง ุชู ุชุนูููู)
    if ADMIN_ID:
        admin_notification = f"""
๐ฌ **ุฑุณุงูุฉ ุฌุฏูุฏุฉ ูู ุงูุนููู**

๐ค **ุงููุณุชุฎุฏู:** {update.effective_user.first_name} (@{update.effective_user.username})
๐ **ูุนุฑู ุงููุณุชุฎุฏู:** {user_id}
๐ฌ **ุงูุฑุณุงูุฉ:** {message_text}
โฐ **ุงูููุช:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_notification, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ูููุณุคูู: {e}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฃูุฑ ุงููุณุงุนุฏุฉ"""
    help_text = """
๐ **ุฃูุงูุฑ ุงูุจูุช ุงููุชุงุญุฉ:**

/start - ุจุฏุก ุงููุญุงุฏุซุฉ ูุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ
/help - ุนุฑุถ ูุฐู ุงูุฑุณุงูุฉ
/status - ูุนูููุงุช ุนู ุญุงูุฉ ุงูุฎุฏูุฉ

---

**ููุงุญุธุฉ:** ููููู ุฃูุถุงู ุงุณุชุฎุฏุงู ุงูุฃุฒุฑุงุฑ ุงูุชูุงุนููุฉ ูู ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ ููุชููู ุจุณูููุฉ.
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฃูุฑ ุญุงูุฉ ุงูุฎุฏูุฉ"""
    status_text = """
โ **ุญุงูุฉ ุงูุฎุฏูุฉ**

๐ข **ุงูุฎุงุฏู:** ูุนูู ุจุดูู ุทุจูุนู
๐ข **ูุงุนุฏุฉ ุงูุจูุงูุงุช:** ูุชุตูุฉ
๐ข **ุงูุฏุนู ุงูููู:** ูุชุงุญ

---

**ุฅุญุตุงุฆูุงุช:**
- ุนุฏุฏ ุงููุณุชุฎุฏููู ุงููุดุทูู: {}
- ุงูุฑุณุงุฆู ุงููุณุชูุจูุฉ ุงูููู: {}

ุดูุฑุงู ูุงุณุชุฎุฏุงูู ุฎุฏูุงุชูุง!
""".format(len(user_data), sum(len(u.get('messages', [])) for u in user_data.values()))
    
    await update.message.reply_text(status_text, parse_mode='Markdown')


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌ ุงูุฃุฎุทุงุก"""
    logger.error(msg="ุญุฏุซ ุงุณุชุซูุงุก ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุชุญุฏูุซ:", exc_info=context.error)
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "โ ุญุฏุซ ุฎุทุฃ ูุง. ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู ุฃู ุงูุชูุงุตู ูุน ูุฑูู ุงูุฏุนู."
        )


def main() -> None:
    """ุจุฏุก ุงูุจูุช"""
    # ุฅูุดุงุก ุงูุชุทุจูู
    application = Application.builder().token(BOT_TOKEN).build()
    
    # ุฅุถุงูุฉ ูุนุงูุฌุงุช ุงูุฃูุงูุฑ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    
    # ุฅุถุงูุฉ ูุนุงูุฌ ููุฑุงุช ุงูุฃุฒุฑุงุฑ
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # ุฅุถุงูุฉ ูุนุงูุฌ ุงูุฑุณุงุฆู ุงููุตูุฉ
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # ุฅุถุงูุฉ ูุนุงูุฌ ุงูุฃุฎุทุงุก
    application.add_error_handler(error_handler)
    
    # ุจุฏุก ุงูุจูุช
    logger.info("๐ ุฌุงุฑู ุจุฏุก ุงูุจูุช...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()

